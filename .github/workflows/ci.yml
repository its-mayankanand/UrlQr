name: CI

on:
  push:                              # run tests when you push to any branch
    branches: ["**"]
  pull_request:                      # also run tests when you open a PR
  release:
    types: [published]               # also run tests when a release is published 

jobs:
  tests:
    runs-on: ubuntu-latest

    env:
      PYTHONPATH: .                       # so `from app.main import app` works

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest

      - name: Install the code linting and formatting tool Ruff
        run: pipx install ruff
        
      - name: Lint code with Ruff
        run: ruff check . --output-format=github --target-version=py312

      - name: Check code formatting with Ruff
        run: ruff format . --diff --target-version=py312
        continue-on-error: true

      - name: Run tests
        run: pytest -v


  docker:                                         #  JOB 2: Docker build + push
    runs-on: ubuntu-latest
    needs: tests                                  # only run if tests pass
    if: github.ref == 'refs/heads/main'           # only run on main branch

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            itsmayankanand/urlqr:latest
            itsmayankanand/urlqr:${{ github.sha }} 


  docker-release:                                #  JOB 3: Release build
    runs-on: ubuntu-latest
    needs: tests
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - name: Cache Docker layers          # cache docker layers to speed up builds
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            itsmayankanand/urlqr:release-${{ github.event.release.tag_name }}
            itsmayankanand/urlqr:${{ github.event.release.tag_name }}
  
  deploy:                            # JOB 4: Deploy to VM when new release with tag
    runs-on: ubuntu-latest
    needs: docker-release
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
      - name: Checkout repo                      # checkout to access deploy/ folder
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.GCP_SSH_KEY }}

      - name: Copy deployment files to VM
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "mkdir -p ~/urlqr-stack"
          scp -o StrictHostKeyChecking=no -r deploy automation_tests ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:~/urlqr-stack/

      - name: Deploy new GREEN containers
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << 'EOF'
            cd ~/urlqr-stack
            TAG=release-${{ github.event.release.tag_name }} docker compose up -d --no-deps app1-green app2-green
          EOF

      - name: Run health checks on GREEN
        run: |
          for i in {1..10}; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.VM_HOST }}/health || true)
            if [ "$STATUS" == "200" ]; then
              echo "GREEN environment is healthy!"
              exit 0
            fi
            echo "Waiting for GREEN... (status: $STATUS)"
            sleep 5
          done
          echo "GREEN environment failed health check"
          exit 1

      - name: Run automation tests on GREEN
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << 'EOF'
            cd ~/urlqr-stack
            pip3 install -r requirements.txt
            TAG=release-${{ github.event.release.tag_name }} python3 automation_tests/qr_api_tests.py
          EOF

      - name: Switch Nginx from BLUE â†’ GREEN
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << 'EOF'
            cd ~/urlqr-stack
            # Swap nginx.conf to green version
            cp nginx.green.conf nginx.conf
            docker exec urlqr-nginx nginx -s reload
          EOF

      - name: Remove old BLUE containers
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << 'EOF'
            cd ~/urlqr-stack
            docker compose stop app1-blue app2-blue
            docker compose rm -f app1-blue app2-blue
          EOF

      - name: Health check (wait until app is ready)
        run: |
          for i in {1..10}; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.VM_HOST }}/health || true)
            if [ "$STATUS" == "200" ]; then
              echo "Application is healthy behind Nginx!"
              exit 0
            fi
            echo "Waiting for app behind Nginx... (status: $STATUS)"
            sleep 5
          done
          echo "Application did not become healthy in time."
          exit 1    
                     
      - name: Install dependencies for automation tests
        run: pip install -r requirements.txt                # <-- add th

      - name: Run automated QR API tests                
        run: |
          python automation_tests/qr_api_tests.py
